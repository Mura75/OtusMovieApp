apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

apply plugin: 'com.google.firebase.appdistribution'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "otus.movieapp"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 5
        versionName "1.0.5"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    signingConfigs {
        release {
            def props = loadProperties('signing.properties')
            if (props.isEmpty()) {
                logger.warn('Release keystore not found.')
                return
            }
            storePassword props['KEYSTORE_PASSWORD']
            keyAlias props['KEY_ALIAS']
            keyPassword props['KEY_PASSWORD']
            storeFile file(props['KEY_STORE'])
        }
    }

    buildTypes {
        release {
            firebaseAppDistribution {
                def props = loadProperties('publish.properties')
                if (props.isEmpty()) {
                    logger.warn('publish functions does not work')
                    return
                }
                appId = props['FIREBASE_APP_ID']
                serviceCredentialsFile = file(props['GOOGLE_APPLICATION_CREDENTIALS'])
                testers = "zmurager2@gmail.com"
            }

            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    //MVVM
//    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
//    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'

    //rxJava
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.17'

    //Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.7.2'
    implementation 'com.squareup.retrofit2:converter-gson:2.7.2'
    implementation "com.squareup.retrofit2:adapter-rxjava2:2.7.2"

    //okHttp
    implementation 'com.squareup.okhttp3:okhttp:4.5.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.5.0'

    //gson
    api 'com.google.code.gson:gson:2.8.6'

    //dagger
    def dagger_version = '2.27'
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    kapt daggerDependencies.daggerCompiler
    kapt daggerDependencies.daggerAndroidProcessor


    //glide
    implementation 'com.github.bumptech.glide:glide:4.10.0'
    implementation 'androidx.cardview:cardview:1.0.0'

    //Paging
    implementation "android.arch.paging:runtime:2.1.2"
    implementation "androidx.paging:paging-rxjava2:2.1.2"


    implementation project(':sources:core')
    implementation project(':sources:main')
    implementation project(':sources:movie_list')
    implementation project(':sources:movie_detail')
}

private Properties loadProperties(String propertiesFilePath) {
    def keystoreProperties = new Properties()

    def keystorePropertiesFile = file(propertiesFilePath)
    if (keystorePropertiesFile.exists()) {
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    }
    return keystoreProperties
}
